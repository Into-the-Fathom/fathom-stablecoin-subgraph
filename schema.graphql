enum PositionStatus {
  safe
  unsafe
  closed
}

type User @entity {
  id: String!
  address: Bytes!
  activePositionsCount: BigInt!
}

type Pool @entity {
  id: String!
  poolName: String!
  debtCeiling: BigInt!
  liquidationRatio: BigDecimal!
  stabilityFeeRate: BigInt!
  tokenAdapterAddress: Bytes!
  lockedCollateral: BigDecimal!
  collateralPrice: BigDecimal!
  collateralLastPrice: BigDecimal!
  priceWithSafetyMargin: BigDecimal!
  rawPrice: BigDecimal!
  debtAccumulatedRate: BigDecimal!
  totalBorrowed: BigInt!
  totalAvailable: BigInt!
  tvl: BigDecimal!
  positions: [Position!]! @derivedFrom(field: "pool")
}

type ProtocolStat @entity {
  id: String!
  totalSupply: BigInt!
  tvl: BigDecimal!
  pools: [String!]!
}

type Position @entity {
  id: String!
  positionAddress: Bytes!
  userAddress: Bytes!
  walletAddress: Bytes!
  collateralPool: Bytes!
  collateralPoolName: String!
  positionId: BigInt!
  lockedCollateral: BigDecimal!
  debtValue: BigDecimal!
  debtShare: BigDecimal!
  safetyBuffer: BigDecimal!
  safetyBufferInPercent: BigDecimal!
  tvl: BigDecimal!
  positionStatus: PositionStatus!
  liquidationCount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transaction: Bytes!
  pool: Pool!
}

type SwapEvent @entity {
  id: String!
  fee: BigInt!
  owner: Bytes!
  value: BigInt!
  isStablecoinToTokenSwap: Boolean!
  isTokenToStablecoinSwap: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transaction: Bytes!
}

type StableSwapStat @entity {
  id: ID!
  totalTokenToStablecoinSwapEvents: BigInt!
  totalStablecoinToTokenSwapEvents: BigInt!
  remainingDailySwapAmount: BigInt!
  tokenToStablecoinTotalSwapValue: BigInt!
  stablecoinToTokenTotalSwapValue: BigInt!
}